import org.jetbrains.changelog.Changelog
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "2.0.20"
    id "org.jetbrains.intellij.platform" version "2.2.1"
    id "pl.allegro.tech.build.axion-release" version "1.18.9"
    id "org.jetbrains.changelog" version "2.0.0"
}

group = "com.github.imvs"

ext {
    pluignSinceBuild = "232"
    pluignUntilBuild = "251.*"
}

scmVersion {
    useHighestVersion = true
    ignoreUncommittedChanges = false
    checks {
        snapshotDependencies = false
        uncommittedChanges = true
        aheadOfRemote = true
    }
    releaseOnlyOnReleaseBranches = true
    releaseBranchNames = ['master']
}

project.version = scmVersion.version

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "17"
    }
}

repositories {
    mavenCentral()
    intellijPlatform {
        defaultRepositories()
    }
}

intellijPlatform {
    pluginVerification {
        ides {
            recommended()
        }
    }
}

changelog {
    repositoryUrl.set("https://github.com/imvs/spring-cloud-config-idea-plugin/")
    version = project.getVersion().toString().replace("-SNAPSHOT", "")
    itemPrefix = "-"
    keepUnreleasedSection = true
    unreleasedTerm = "Unreleased"
    groups = []
    combinePreReleases = true
}

tasks {
    signPlugin {
        certificateChain.set(project.property("signPlugin.certificateChain").toString())
        privateKey.set(project.property("signPlugin.privateKey").toString())
        password.set(project.property("signPlugin.password").toString())
    }

    publishPlugin {
        token.set(project.property("publishPlugin.publishToken").toString())
    }

    patchPluginXml {
        sinceBuild.set("${pluignSinceBuild}")
        untilBuild.set("${pluignUntilBuild}")
        changeNotes.set(
                changelog
                        .getAll()
                        .drop(1)
                        .collect { key, value -> changelog.renderItem(value, Changelog.OutputType.HTML) }
                        .inject("", { ver1, ver2 -> ver1 + ver2 })
        )
    }
}

dependencies {

    intellijPlatform {
        intellijIdeaCommunity("251.14649.49")
        bundledPlugin("com.intellij.java")
        instrumentationTools()
        pluginVerifier()
        zipSigner()
    }

    //noinspection VulnerableLibrariesLocal
    implementation("org.springframework.cloud:spring-cloud-config-server:4.1.5") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-web"
        exclude group: "org.springframework.boot", module: "spring-boot-starter-validation"
        exclude group: "org.springframework.security", module: "spring-security-crypto"
        exclude group: "ORG.APACHE.SSHD", module: ""
        exclude group: "org.slf4j", module: ""
    }
    compileOnly "org.projectlombok:lombok:1.18.32"
    annotationProcessor "org.projectlombok:lombok:1.18.32"
    testCompileOnly "org.projectlombok:lombok:1.18.32"
    testAnnotationProcessor "org.projectlombok:lombok:1.18.32"

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.9.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.9.2"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:1.7.2"
}

test {
    useJUnitPlatform()
}

